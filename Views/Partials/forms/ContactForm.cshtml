@using Microsoft.Extensions.Configuration;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using FlexiForms.Controllers;
@using FlexiFormModels = FlexiForms.Models.FormFields;
@inject IConfiguration _configuration;
@model FlexiForms.Models.ContactFormViewModel;
@{
    string submittedFormType = (string)TempData["FormType"];

    var submitted = false;
    if (bool.TryParse(TempData["Success"]?.ToString() ?? "", out var success))
    {
        submitted = true;
    }
}


<section class="contact-form">

    <script src="https://www.google.com/recaptcha/api.js" async defer></script>

    <h2>@Model.FormHeader</h2>

    @if (submitted && success && submittedFormType == Model.FormIdentifier)
    {
        @Html.Raw(Model.SuccessMessage)
    }
    else
    {
        if (submitted && !success && submittedFormType == Model.FormIdentifier)
        {
            <div>
                <p class="form-error">Error</p>
                @Html.ValidationSummary()
                @Html.AntiForgeryToken()
            </div>
        }

        @using (Html.BeginUmbracoForm<ContactFormController>(nameof(ContactFormController.Submit)))
        {
            <ul>
                <li>
                    <label asp-for="Name" />
                    <input asp-for="Name" />
                </li>
                <li class="form-row">
                    <label asp-for="Email" />
                    <input asp-for="Email" />
                </li>
                @if (Model.Elements != null && Model.Elements.Any())
                {
                    for (var i = 0; i < Model.Elements.Count(); i++)
                    {
                        switch (Model.Elements.ElementAtOrDefault(i))
                        {

                            case FlexiFormModels.Textbox formTextbox:
                                <li>
                                    <label for="Elements[@i].Value">@(formTextbox.Label)</label>
                                    <input id="Elements[@i].Value" type="text" name="Elements[@i].Value" @(formTextbox.IsMandatory.Value ? "required" : "") />

                                    <input type="hidden" name="Elements[@i].Id" value="@(formTextbox.Id)" />
                                </li>
                                break;

                            case FlexiFormModels.Checkbox formCheckbox:
                                <li>
                                    <label for="Elements[@i].Value">@(formCheckbox.Label)</label>
                                    <input id="Elements[@i].Value" type="checkbox" name="Elements[@i].Value" @(formCheckbox.IsMandatory.Value ? "required" : "") />

                                    <input type="hidden" name="Elements[@i].Id" value="@(formCheckbox.Id)" />
                                </li>
                                break;

                            case FlexiFormModels.RadioSection formRadioSection:
                                <li>
                                    <label for="Elements[@i].Value">@formRadioSection.Label</label>
                                    <ul class="form-inner">
                                        @foreach (var radioOption in formRadioSection.RadioOptions)
                                        {
                                            <li>
                                                <input id="@radioOption" type="radio" name="Elements[@i].Value" value="@radioOption" />
                                                <label for="@radioOption">@radioOption</label>
                                            </li>
                                        }
                                    </ul>
                                    <input type="hidden" name="Elements[@i].Id" value="@(formRadioSection.Id)" />
                                </li>
                                break;

                            case FlexiFormModels.TextArea formTextArea:
                                <li>
                                    <label for="Elements[@i].Value">@(formTextArea.Label)</label>
                                    <textarea id="Elements[@i].Value" for="Elements[@i].Value" name="Elements[@i].Value" rows="5" @(formTextArea.IsMandatory.Value ? "required" : "")></textarea>

                                    <input type="hidden" name="Elements[@i].Id" value="@(formTextArea.Id)" />
                                </li>
                                break;

                            case FlexiFormModels.Dropdown formDropdown:
                                <li>
                                    <label for="Elements[@i].Value">@formDropdown.Label</label>
                                    <select id="Elements[@i].Value" for="Elements[@i].Value" name="Elements[@i].Value" @(formDropdown.IsMandatory.Value ? "required" : "")>
                                        @foreach (var dropdownOption in formDropdown.DropdownOptions)
                                        {
                                            <option value="@dropdownOption">@dropdownOption</option>
                                        }
                                    </select>

                                    <input type="hidden" name="Elements[@i].Id" value="@(formDropdown.Id)" />
                                </li>
                                break;

                            default:
                                break;
                        }
                    }
                }
                <li>
                    <input type="hidden" asp-for="FormIdentifier" value="@Model.FormIdentifier">
                </li>
                @if (Model.Captcha != null)
                {
                    <li>
                        <div class="g-recaptcha" data-sitekey="@Model.Captcha.Sitekey"></div>
                    </li>
                }
                <li>
                    <button type="submit">Submit</button>
                </li>
            </ul>
        }
    }

    <script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit" async defer></script>

</section>