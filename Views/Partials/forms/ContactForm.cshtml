@using Microsoft.Extensions.Configuration;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using FlexForms.Controllers;
@using FlexFormModels = FlexForms.Models.FormFields;
@inject IConfiguration _configuration;
@model FlexForms.Models.ContactFormViewModel;
@{
    var siteKey = _configuration.GetValue<string>("ReCaptcha:Sitekey");

    string submittedFormType = (string)TempData["FormType"];

    var submitted = false;
    if (bool.TryParse(TempData["Success"]?.ToString() ?? "", out var success))
    {
        submitted = true;
    }
}


<script src="https://www.google.com/recaptcha/api.js" async defer></script>

@if (submitted && success && submittedFormType == Model.FormIdentifier)
{
    if (Model.SuccessMessage != null)
    {
        @Html.Raw(Model.SuccessMessage)
    }
    else
    {
        <p>Your enquirey has been sent</p>
    }
}
else
{
    if (submitted && !success && submittedFormType == Model.FormIdentifier)
    {
        <div>
            <p class="form-error">Error</p>
            @Html.ValidationSummary()
            @Html.AntiForgeryToken()
        </div>
    }

    @using (Html.BeginUmbracoForm<ContactFormController>(nameof(ContactFormController.Submit)))
    {
        <ul>
            <li>
                <label asp-for="Name"></label>
                <input asp-for="Name" />
            </li>
            <li class="form-row">
                <label asp-for="Email"></label>
                <input asp-for="Email" />
            </li>
            @if (Model.Elements != null && Model.Elements.Any())
            {
                for (var i = 0; i < Model.Elements.Count(); i++)
                {
                    switch (Model.Elements.ElementAtOrDefault(i))
                    {

                        case FlexFormModels.Textbox formTextbox:
                            <li>
                                <label for="Elements[@i].Value">@(formTextbox.Label)</label>
                                <input id="Elements[@i].Value" type="text" name="Elements[@i].Value" @(formTextbox.IsMandatory ? "required" : "") />

                                <input type="hidden" name="Elements[@i].Label" value="@(formTextbox.Label)" />
                                <input type="hidden" name="Elements[@i].IsMandatory" value="@(formTextbox.IsMandatory ? "true" : "false")" />
                            </li>
                            break;

                        case FlexFormModels.Checkbox formCheckbox:
                            <li>
                                <label for="Elements[@i].Value">@(formCheckbox.Label)</label>
                                <input id="Elements[@i].Value" type="checkbox" name="Elements[@i].Value" @(formCheckbox.IsMandatory ? "required" : "") />

                                <input type="hidden" name="Elements[@i].Label" value="@(formCheckbox.Label)" />
                                <input type="hidden" name="Elements[@i].IsMandatory" value="@(formCheckbox.IsMandatory ? "true" : "false")" />
                            </li>
                            break;

                        case FlexFormModels.RadioSection formRadioSection:
                            <li>
                                <label for="Elements[@i].Value">@formRadioSection.Label</label>
                                <ul class="form-inner">
                                    @foreach (var radioOption in formRadioSection.RadioOptions)
                                    {
                                        <li>
                                            <input id="@radioOption" type="radio" name="Elements[@i].Value" value="@radioOption" />
                                            <label for="@radioOption">@radioOption</label>
                                        </li>
                                    }
                                </ul>
                                <input type="hidden" name="Elements[@i].Label" value="@(formRadioSection.Label)" />
                                <input type="hidden" name="Elements[@i].IsMandatory" value="@(formRadioSection.IsMandatory ? "true" : "false")" />
                            </li>
                            break;

                        case FlexFormModels.TextArea formTextArea:
                            <li>
                                <label for="Elements[@i].Value">@(formTextArea.Label)</label>
                                <textarea id="Elements[@i].Value" for="Elements[@i].Value" name="Elements[@i].Value" rows="5" @(formTextArea.IsMandatory ? "required" : "")></textarea>

                                <input type="hidden" name="Elements[@i].Label" value="@(formTextArea.Label)" />
                                <input type="hidden" name="Elements[@i].IsMandatory" value="@(formTextArea.IsMandatory ? "true" : "false")" />
                            </li>
                            break;

                        case FlexFormModels.Dropdown formDropdown:
                            <li>
                                <label for="Elements[@i].Value">@formDropdown.Label</label>
                                <select id="Elements[@i].Value" for="Elements[@i].Value" name="@formDropdown.Label" @(formDropdown.IsMandatory ? "required" : "")>
                                    @foreach (var dropdownOption in formDropdown.DropdownOptions)
                                    {
                                        <option value="@dropdownOption">@dropdownOption</option>
                                    }
                                </select>

                                <input type="hidden" name="Elements[@i].Label" value="@(formDropdown.Label)" />
                                <input type="hidden" name="Elements[@i].IsMandatory" value="@(formDropdown.IsMandatory ? " true" : "false" )" />
                            </li>
                            break;

                        default:
                            break;
                    }
                }
            }
            <li>
                <input type="hidden" asp-for="FormIdentifier" value="@Model.FormIdentifier">
            </li>
            <li>
                <div class="g-recaptcha" data-sitekey="@siteKey"></div>
            </li>
            <li>
                <button type="submit">Submit</button>
            </li>
        </ul>
    }
}

<script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit" async defer>
</script>
